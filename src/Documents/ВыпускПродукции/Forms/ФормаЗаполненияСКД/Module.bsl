#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Строки = ДанныеДляЗаполнения.НайтиСтроки(Новый Структура("Пометка", Истина));

	Если Строки.Количество() > 0 Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			"Данные еще не перенесены в документ! Закрыть форму?", РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КоличествоСтрокДокументаВладельца = Параметры.КоличествоСтрокДокумента;
	
	Схема = Документы.ВыпускПродукции.ПолучитьМакет("СхемаКомпановкиДанныхЗаполнения");
	АдресСКД = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	КомпановщикНастроек	.Инициализировать(Источник);
	СтруктураПараметров = ХранилищеНастроекДанныхФорм.Загрузить("ВыпускПродукции_ФормаЗаполнения");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура")и СтруктураПараметров.Свойство("отбор") Тогда
		ЭлементыОтбора = КомпановщикНастроек.Настройки.Отбор.Элементы;
		ЭлементыОтбора.Очистить();
		СкопироватьЭлементыОтбора(ЭлементыОтбора, СтруктураПараметров.Отбор.Элементы);
	КонецЕсли;
	КомпановщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);

КонецПроцедуры



&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
СохранитьНастройкиНаСервере(КомпановщикНастроек.Настройки.Отбор);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпановщикНастроекНастройкиОтбор

&НаКлиенте
Процедура ДанныеДляЗаполненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ =Истина;
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВосстановитьОтборыПоУмолчанию(Команда)
	ВосстановитьОтборыПоУмолчаниюНаСервере(КомпановщикНастроек, АдресСКД);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПеренестиВДокументВладельца(Команда)  
Если НЕ УдалятьВыбранныеСтрокиВДокументеВладельца    Тогда
		
		
		ПеренестиДанные();
		
	ИначеЕсли УдалятьВыбранныеСтрокиВДокументеВладельца Тогда
		
		Если КоличествоСтрокДокументаВладельца<16+Счетчик Тогда
			
			УдалитьВыбранныеСтрокиВДокументеВладельца(); 
			ПеренестиДанные(); 
		Иначе 
			
			Ждать ПредупреждениеАсинх(Нстр("ru='В документе не может  быть  больше 16 строк, перенос и удаление строк не выполнены'"));




		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры  

&НаКлиенте
Асинх Процедура ПеренестиВДокумент(Команда)  
	
	Если НЕ УдалятьВыбранныеСтрокиВДокументеВладельца    Тогда
		
		
		ПеренестиДанные();
		
	ИначеЕсли УдалятьВыбранныеСтрокиВДокументеВладельца Тогда
		
		Если КоличествоСтрокДокументаВладельца<16+Счетчик Тогда
			
			УдалитьВыбранныеСтрокиВДокументеВладельца(); 
			ПеренестиДанные(); 
		Иначе 
			
			Ждать ПредупреждениеАсинх(Нстр("ru='В документе не может  быть  больше 16 строк, перенос и удаление строк не выполнены'"));
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры 

&НаКлиенте
Процедура ПеренестиДанные()

	АдресДанных = Неопределено;
		
		ПодготовитьДанныеНаСервере(АдресДанных); 
		
		Счетчик = 0;
		
		Для каждого СтрокаДЗ из ДанныеДляЗаполнения Цикл 
			Если СтрокаДЗ.Пометка Тогда 
				Счетчик= Счетчик+1;
			КонецЕсли;
			
		КонецЦикла;
		
		Данные = Новый Структура("АдресДанныхДляЗаполнения, КоличествоСтрокПереноса", АдресДанных, Счетчик);
		
		ДанныеДляЗаполнения.Очистить();
		
		ОповеститьОВыборе(Данные);

	
КонецПроцедуры




&НаКлиенте
Процедура УстановитьВсеФлажки(Команда)
	Для каждого Строка Из ДанныеДляЗаполнения Цикл
	     Строка.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлажки(Команда)
	Для каждого Строка Из ДанныеДляЗаполнения Цикл
	     Строка.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура  УдалитьВыбранныеСтрокиВДокументеВладельца()
		
	АдресВыгрузки = Неопределено;
	
	ВыгрузитьДанныеДляЗаполнения(АдресВыгрузки);
	
	
	 УдалитьНаСервере(АдресВыгрузки);
	
 КонецПроцедуры


&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Знач Отбор)
СтруктураПараметров = Новый Структура;
СтруктураПараметров.Вставить("Отбор", Отбор);
ХранилищеНастроекДанныхФорм.Сохранить("ВыпускПродукции_ФормаЗаполнения", , СтруктураПараметров);


КонецПроцедуры // СохранитьНастройкиНаСервере()

&НаСервереБезКонтекста
Процедура ВосстановитьОтборыПоУмолчаниюНаСервере(КомпановщикНастроек, АдресСКД)
	ЭлементыОтбора =  КомпановщикНастроек.Настройки.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	Схема = ПолучитьИзВременногоХранилища(АдресСКД);
	СкопироватьЭлементыОтбора(ЭлементыОтбора, Схема.НастройкиПоУмолчанию.отбор.Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
			Если  РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ДанныеДляЗаполнения.Очистить();
			Закрыть();
			КонецЕсли;
			
КонецПроцедуры


&НаСервере
Процедура ПодготовитьДанныеНаСервере(АдресДанных)

	 ТаблицаЗначений  = РеквизитФормыВЗначение("ДанныеДляЗаполнения");
	ТаблицаЗначений.Очистить();
	Для Каждого Строка Из ДанныеДляЗаполнения Цикл
		Если Строка.Пометка Тогда
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;

		АдресДанных =  ПоместитьВоВременноеХранилище(ТаблицаЗначений, УникальныйИдентификатор);

	КонецЦикла;

КонецПроцедуры // ПодготовитьДанныеНаСервере()

&НаСервере
 Процедура ВыгрузитьДанныеДляЗаполнения(АдресВыгрузки)
	 
	   ТаблицаЗначений = ДанныеДляЗаполнения.Выгрузить();
	    ТаблицаЗначений.Очистить();
	
	Для каждого Строка Из ДанныеДляЗаполнения Цикл
		Если Строка.Пометка тогда
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	АдресВыгрузки =  ПоместитьВоВременноеХранилище(ТаблицаЗначений, УникальныйИдентификатор);
	 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Настройки = КомпановщикНастроек.Настройки;
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", Период.ДатаНачала);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКонца", Период.ДатаОкончания);
	Схема = ПолучитьИзВременногоХранилища(АдресСКД);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, Настройки, , , тип(
		"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(Макет);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ТаблицаЗначений.Колонки.Добавить("Пометка");
	ТаблицаЗначений.ЗаполнитьЗначения(Истина, "Пометка");
	ДанныеДляЗаполнения.Загрузить(ТаблицаЗначений);
	 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьЭлементыОтбора(Приемник, Источник)
Для каждого ЭлементОтбораИсточник Из Источник Цикл
	ЭлементОтбораПриемник = Приемник.Добавить(ТипЗнч(ЭлементОтбораИсточник));
	ЗаполнитьЗначенияСвойств(ЭлементОтбораПриемник, ЭлементОтбораИсточник);
	Если ТипЗнч(ЭлементОтбораИсточник) =Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		СкопироватьЭлементыОтбора(ЭлементОтбораПриемник.Элементы, ЭлементОтбораИсточник.Элементы);
	КонецЕсли;
КонецЦикла;
КонецПроцедуры // СкопироватьЭлементыОтбора()

&НаСервере
 Процедура  УдалитьНаСервере(АдресВыгрузки)
	 ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВыгрузки);
	 
	 Для Каждого Строка  из ДанныеХранилища Цикл
		 
		 ДокументОбект = Строка.Документ.ПолучитьОбъект();
		 
		 СтруктураЗначений = Новый Структура();
		 
		 Если ЗначениеЗаполнено(Строка.Марка) Тогда
			СтруктураЗначений.Вставить("Марка", Строка.Марка); 
			 
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Строка.Размер) Тогда
			 
			 СтруктураЗначений.Вставить("Размер", Строка.Размер); 
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Строка.Вес) Тогда
			 
			 СтруктураЗначений.Вставить("Вес", Строка.Вес);
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Строка.ВесБрутто) Тогда
			 
			 СтруктураЗначений.Вставить("ВесБрутто", Строка.ВесБрутто);
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Строка.ВесНетто) Тогда
			 СтруктураЗначений.Вставить("ВесНетто", Строка.ВесНетто);
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Строка.Гост) Тогда
			 СтруктураЗначений.Вставить("Гост", Строка.Гост);
		 КонецЕсли; 
		 
		 Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			 СтруктураЗначений.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Строка.Количество) Тогда
			 СтруктураЗначений.Вставить("Количество", Строка.Количество);
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Строка.РассчитываемоеКоличествоБухт) Тогда
			 СтруктураЗначений.Вставить("РассчитываемоеКоличествоБухт", Строка.РассчитываемоеКоличествоБухт);
		 КонецЕсли;
		 
		
		 
		 Если ЗначениеЗаполнено(Строка.НомерБарабана) Тогда
			 СтруктураЗначений.Вставить("НомерБарабана", Строка.НомерБарабана);
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Строка.НомерИспытания) Тогда
			 СтруктураЗначений.Вставить("НомерИспытания", Строка.НомерИспытания);
		 КонецЕсли;
		 
		  Если ЗначениеЗаполнено(Строка.НомерЗаявки) Тогда
			 СтруктураЗначений.Вставить("НомерЗаявки", Строка.НомерЗаявки);
		 КонецЕсли;
		 
		 ТабЧастьДок = ДокументОбект.СписокКабелей;
		 МассивСтрокДляУдаления = ТабЧастьДок.НайтиСтроки(СтруктураЗначений);
		 
		 Если МассивСтрокДляУдаления.Количество()<>0 или МассивСтрокДляУдаления<>Неопределено  тогда
			 
			 Для каждого Строка Из МассивСтрокДляУдаления Цикл 
				 СтруктураУдаляемыхСтрок = Новый Структура("Марка, Размер, Количество", Строка.Марка, Строка.Размер, Строка.Количество);   
				 Попытка
					 
					 ТабЧастьДок.Удалить(Строка); 
					 
					 
				 Исключение
					 
					 ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
					 
				 КонецПопытки;
				 
				 
				 ТекстСообщения = " При переносе строк, В документе №: "+ДокументОбект.Номер+",  от "+Формат(ДокументОбект.Дата,"ДЛФ=DD"
				 )+"  была удаленена строка: "+СтруктураУдаляемыхСтрок.Марка+", Количество: "+СтруктураУдаляемыхСтрок.Количество; 
				 Сообщение = Новый СообщениеПользователю;
				 Сообщение.Текст = ТекстСообщения;
				 Сообщение.Сообщить();
				 
			 КонецЦикла; 
			 
		 КонецЕсли;
		 
		 Попытка
			 ДокументОбект.Записать();
			 
		 Исключение
			  ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		 КонецПопытки;
			 
		 КонецЦикла;
	 КонецПроцедуры 

&НаКлиенте
Асинх Процедура УдалятьВыбранныеСтрокиВДокументеВладельцаПриИзменении(Элемент)
		 
Если  УдалятьВыбранныеСтрокиВДокументеВладельца  Тогда	
		Обещание = 	ВопросАсинх(НСтр("ru='Включение этой настройки приведет к  удалению  нижевыбранных строк в документе владельца, 
										  |сразу  же после нажатия кнопки перенести в документ, продолжить?'"), РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Да,"Внимание");
		
		Результат = Ждать Обещание; 
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			УдалятьВыбранныеСтрокиВДокументеВладельца = Истина;
			ПометкаУстановлена = Истина;
		Иначе 
			УдалятьВыбранныеСтрокиВДокументеВладельца = Ложь;

		КонецЕсли;
		
	
		
	КонецЕсли;	
КонецПроцедуры
#КонецОбласти
  




